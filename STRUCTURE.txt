London Breakout Strategy - Project Structure
=============================================

londonbreakout/
│
├── Core Strategy Modules (Python)
│   ├── strategy.py              (11 KB)  - London Breakout strategy logic
│   ├── risk_management.py       (14 KB)  - Risk & position management
│   ├── backtest.py              (15 KB)  - Backtesting engine
│   ├── data_loader.py           (11 KB)  - Data loading & preprocessing
│   └── ctrader_api.py           (13 KB)  - cTrader API integration
│
├── Configuration
│   ├── config.py                (4.5 KB) - All strategy parameters
│   ├── .env.example             (500 B)  - Environment variables template
│   └── .gitignore               (500 B)  - Git ignore patterns
│
├── Executable Scripts
│   ├── run_backtest.py          (2.1 KB) - Run backtest
│   ├── optimize.py              (4.6 KB) - Parameter optimization
│   └── test_setup.py            (7.0 KB) - Validation & testing
│
├── Documentation
│   ├── README.md                (8.2 KB) - Complete documentation
│   ├── QUICKSTART.md            (4.5 KB) - Quick start guide
│   ├── PROJECT_SUMMARY.md       (7.9 KB) - Project overview
│   └── STRUCTURE.txt            (this file)
│
├── Dependencies
│   └── requirements.txt         (765 B)  - Python packages
│
└── Generated Files (after running)
    ├── data/                    - Historical market data
    │   └── EURUSD_5min.csv
    ├── backtest_results.png     - Performance charts
    ├── trades.csv               - Trade log
    ├── optimization_results.csv - Optimization results
    └── londonbreakout.log       - Application logs

Total: 13 source files, ~100 KB of code

Key Features by File
====================

strategy.py
-----------
• LondonBreakoutStrategy class
• Asian session range identification
• Breakout detection with buffer
• Signal generation (LONG/SHORT/NONE)
• Trend filtering (EMA-based)
• Time-based session management
• Signal validation

risk_management.py
------------------
• RiskManager class
• Dynamic position sizing (% risk)
• 0.01 lots per $100 rule
• Daily loss limits
• Maximum position limits
• Trailing stop management
• Performance statistics
• Trade tracking & P&L calculation

backtest.py
-----------
• BacktestEngine class
• Bar-by-bar simulation
• Realistic order execution
• Stop-loss & take-profit handling
• Performance metrics (15+ metrics)
• Equity curve tracking
• Drawdown calculation
• Visual report generation
• Trade log export to CSV

data_loader.py
--------------
• DataLoader class
• CSV file loading
• MT5 export compatibility
• Sample data generation
• Data validation & cleaning
• Timeframe resampling
• Time feature extraction
• Yahoo Finance integration

ctrader_api.py
--------------
• CTraderClient wrapper
• API authentication
• Market data streaming
• Order execution
• Position modification
• Symbol management
• LiveTrader framework
• Lots/volume conversion

config.py
---------
• Strategy parameters (sessions, ranges, etc.)
• Risk management settings
• Trading pair list
• API credentials
• Backtesting configuration
• Advanced features (trailing stop, etc.)

Scripts
-------
• run_backtest.py   - Simple backtest runner
• optimize.py       - Grid search optimization
• test_setup.py     - Installation validator

Quick Reference
===============

To get started:
1. Install: pip install -r requirements.txt
2. Test:    python test_setup.py
3. Run:     python run_backtest.py

To customize:
• Edit config.py for strategy parameters
• Modify strategy.py for strategy logic
• Adjust risk_management.py for risk rules

For live trading:
• Install OpenApiPy
• Configure .env with cTrader credentials
• Use ctrader_api.py framework

Documentation:
• QUICKSTART.md - 5-minute setup
• README.md     - Full documentation
• PROJECT_SUMMARY.md - Complete overview
• Code comments - Extensive inline docs

Performance:
• ~2,500+ lines of well-documented code
• Modular architecture for easy customization
• Comprehensive test coverage
• Production-ready risk management

Support:
• All modules have extensive docstrings
• Example usage in each file
• Test scripts for validation
• README includes troubleshooting
